{"amount_correct": 21, "percentage_score": 45, "report_time": "2024-04-12 04:10:32", "checks": [{"description": "Ensure that the main.py file exists in the listsorting/listsorting/ directory", "check": "ConfirmFileExists", "status": true, "path": "listsorting/listsorting/experiment.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for main.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "listsorting/listsorting/experiment.py", "diagnostic": "Found 1 fragment(s) in the experiment.py or the output while expecting exactly 0"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in experiment.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 5, "exact": false}, "status": true, "path": "listsorting/listsorting/experiment.py"}, {"description": "Create a sufficient number of single-line comments in experiment.py", "check": "CountSingleLineComments", "options": {"language": "Python", "count": 10, "exact": false}, "status": true, "path": "listsorting/listsorting/experiment.py"}, {"description": "Ensure that the main.py file exists in the listsorting/listsorting/ directory", "check": "ConfirmFileExists", "status": true, "path": "listsorting/listsorting/main.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for main.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "listsorting/listsorting/main.py", "diagnostic": "Found 10 fragment(s) in the main.py or the output while expecting exactly 0"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in main.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 3, "exact": false}, "status": true, "path": "listsorting/listsorting/main.py"}, {"description": "Create a sufficient number of single-line comments in main.py", "check": "CountSingleLineComments", "options": {"language": "Python", "count": 5, "exact": false}, "status": true, "path": "listsorting/listsorting/main.py"}, {"description": "Conduct a doubling experiment for sorting by calling the run_sorting_algorithm_experiment_campaign", "check": "MatchFileFragment", "options": {"fragment": "experiment.run", "count": 1, "exact": true}, "objectives": {"LO3": {"degree": [{"DS": "I", "rationale": "PO1. pass indicates experiment campaign function called"}]}}, "status": false, "path": "listsorting/listsorting/main.py", "diagnostic": "Found 0 fragment(s) in the main.py or the output while expecting exactly 1"}, {"description": "Import the tabulate module from the tabulate package", "check": "MatchFileFragment", "options": {"fragment": "tabulate import", "count": 1, "exact": true}, "objectives": {"LO3": {"degree": [{"DS": "I", "rationale": "PO1. pass indicates prep for displaying experimental results"}]}}, "status": false, "path": "listsorting/listsorting/main.py", "diagnostic": "Found 0 fragment(s) in the main.py or the output while expecting exactly 1"}, {"description": "Use a variable named algorithm within a function call to run a specific sorting algorithm", "check": "MatchFileFragment", "options": {"fragment": "algorithm,", "count": 1, "exact": true}, "objectives": {"LO2": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates specific algorithm was used for sorting"}, {"CS": "I", "rationale": "PO1. pass indicates specific algorithm was used for sorting"}]}}, "status": false, "path": "listsorting/listsorting/main.py", "diagnostic": "Found 0 fragment(s) in the main.py or the output while expecting exactly 1"}, {"description": "Confirm the accuracy of the first data table header", "check": "MatchFileFragment", "options": {"fragment": "Input Size", "count": 1, "exact": false}, "objectives": {"LO2": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates correct use of a data structure (table) in a python program"}, {"CS": "I", "rationale": "PO1. pass indicates correct use of a data structure (table) in a python program"}]}}, "status": true, "path": "listsorting/listsorting/main.py"}, {"description": "Confirm the accuracy of the second data table header", "check": "MatchFileFragment", "options": {"fragment": "Min time (s)", "count": 1, "exact": false}, "objectives": {"LO2": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates correct use of a data structure (table) in a python program"}, {"CS": "I", "rationale": "PO1. pass indicates correct use of a data structure (table) in a python program"}]}}, "status": false, "path": "listsorting/listsorting/main.py", "diagnostic": "Found 0 fragment(s) in the main.py or the output while expecting at least 1"}, {"description": "Confirm the accuracy of the third data table header", "check": "MatchFileFragment", "options": {"fragment": "Max time (s)", "count": 1, "exact": false}, "objectives": {"LO2": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates correct use of a data structure (table) in a python program"}, {"CS": "I", "rationale": "PO1. pass indicates correct use of a data structure (table) in a python program"}]}}, "status": false, "path": "listsorting/listsorting/main.py", "diagnostic": "Found 0 fragment(s) in the main.py or the output while expecting at least 1"}, {"description": "Confirm the accuracy of the fourth data table header", "check": "MatchFileFragment", "options": {"fragment": "Avg time (s)", "count": 1, "exact": false}, "objectives": {"LO2": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates correct use of a data structure (table) in a python program"}, {"CS": "I", "rationale": "PO1. pass indicates correct use of a data structure (table) in a python program"}]}}, "status": false, "path": "listsorting/listsorting/main.py", "diagnostic": "Found 0 fragment(s) in the main.py or the output while expecting at least 1"}, {"description": "Ensure that the test_sorting.py file exists in the listsorting/tests/ directory", "check": "ConfirmFileExists", "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for test_sorting.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "listsorting/tests/test_sorting.py", "diagnostic": "Found 2 fragment(s) in the test_sorting.py or the output while expecting exactly 0"}, {"description": "Ensure that there are the right number of test cases defined in the test_sorting.py file", "check": "MatchFileFragment", "options": {"fragment": "test_", "count": 2, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in test_sorting.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 2, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Create a sufficient number of single-line comments in test_sorting.py", "check": "CountSingleLineComments", "options": {"language": "Python", "count": 2, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Ensure that the sorting.py file exists in the listsorting/listsorting/ directory", "check": "ConfirmFileExists", "status": true, "path": "listsorting/listsorting/sorting.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for sorting.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "listsorting/listsorting/sorting.py", "diagnostic": "Found 3 fragment(s) in the sorting.py or the output while expecting exactly 0"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in sorting.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 2, "exact": false}, "status": true, "path": "listsorting/listsorting/sorting.py"}, {"description": "Create a sufficient number of single-line comments in sorting.py", "check": "CountSingleLineComments", "options": {"language": "Python", "count": 2, "exact": false}, "status": true, "path": "listsorting/listsorting/sorting.py"}, {"description": "Implement seven algorithms to support different types of sorting", "check": "MatchFileFragment", "options": {"fragment": "return", "count": 7, "exact": false}, "objectives": {"LO2": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates sorting algorithms of various efficiency were implemented"}, {"CS": "I", "rationale": "PO1. pass indicates sorting algorithms of various efficiency were implemented"}]}}, "status": false, "path": "listsorting/listsorting/sorting.py", "diagnostic": "Found 0 fragment(s) in the sorting.py or the output while expecting at least 7"}, {"description": "Ensure that the test_sorting.py file exists in the listsorting/tests/ directory", "check": "ConfirmFileExists", "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for test_sorting.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "listsorting/tests/test_sorting.py", "diagnostic": "Found 2 fragment(s) in the test_sorting.py or the output while expecting exactly 0"}, {"description": "Ensure that there are the right number of test cases defined in the test_sorting.py file", "check": "MatchFileFragment", "options": {"fragment": "test_", "count": 2, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in test_sorting.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 3, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Create a sufficient number of single-line comments in test_sorting.py", "check": "CountSingleLineComments", "options": {"language": "Python", "count": 2, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Ensure that the reflection.md file exists in the writing/ directory", "check": "ConfirmFileExists", "status": true, "path": "writing/reflection.md"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for the reflection", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 26 fragment(s) in the reflection.md or the output while expecting exactly 0"}, {"description": "Delete the 'Add Your Name Here' prompt in the reflection file", "check": "MatchFileFragment", "options": {"fragment": "Add Your Name Here", "count": 0, "exact": true}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 1 fragment(s) in the reflection.md or the output while expecting exactly 0"}, {"description": "Confirm that the markdown file has the correct number of headers", "check": "CountMarkdownTags", "options": {"tag": "heading", "count": 18, "exact": false}, "status": true, "path": "writing/reflection.md"}, {"description": "Confirm that the markdown file has the correct number of fenced code blocks", "check": "CountMarkdownTags", "options": {"tag": "code_block", "count": 5, "exact": false}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 0 tag(s) in the reflection.md file"}, {"description": "List second of three or more research questions that can be answered empirically", "check": "MatchFileFragment", "options": {"fragment": "- RQ2:", "count": 1, "exact": false}, "objectives": {"LO1": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates planned analysis of experimental data"}, {"CS": "I", "rationale": "PO1. pass indicates planned analysis of experimental data"}]}}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 0 fragment(s) in the reflection.md or the output while expecting at least 1"}, {"description": "List third of three or more research questions that can be answered empirically", "check": "MatchFileFragment", "options": {"fragment": "- RQ3:", "count": 1, "exact": false}, "objectives": {"LO1": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates planned analysis of experimental data"}, {"CS": "I", "rationale": "PO1. pass indicates planned analysis of experimental data"}]}}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 0 fragment(s) in the reflection.md or the output while expecting at least 1"}, {"description": "Explain which sorting algorithm is fastest, and delete the prompt", "check": "MatchFileFragment", "options": {"fragment": "explain which sorting algorithm is\nfastest", "count": 0, "exact": true}, "objectives": {"LO1": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates sorting algorithms were compared for time efficiency"}, {"CS": "I", "rationale": "PO1. pass indicates sorting algorithms were compared for time efficiency"}]}}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 1 fragment(s) in the reflection.md or the output while expecting exactly 0"}, {"description": "Compute and explain by how much the fastest algorithm it is faster, and delete the prompt", "check": "MatchFileFragment", "options": {"fragment": ", by how much it is faster,", "count": 0, "exact": true}, "objectives": {"LO1": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates doubling ratio was calculated and stated"}, {"CS": "I", "rationale": "PO1. pass indicates doubling ratio was calculated and stated"}]}}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 1 fragment(s) in the reflection.md or the output while expecting exactly 0"}, {"description": "Mention specific python constructs that lead to observed doubling ratio, and delete the prompt", "check": "MatchFileFragment", "options": {"fragment": "mentioning specific python constructs.", "count": 0, "exact": true}, "objectives": {"LO1": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates python constructs impacting efficiency were identified"}, {"CS": "I", "rationale": "PO1. pass indicates python constructs impacting efficiency were identified"}]}}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 1 fragment(s) in the reflection.md or the output while expecting exactly 0"}, {"description": "Show fraction for calculating at least one doubling ratio for each algorithm using mathematical markdown syntax", "check": "MatchFileFragment", "options": {"fragment": "\frac{", "count": 5, "exact": false}, "objectives": {"LO1": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates accuracy in characterizing algorithms through mathematical calculation"}, {"CS": "I", "rationale": "PO1. pass indicates accuracy in characterizing algorithms through mathematical calculation"}]}, "LO3": {"degree": [{"DS": "I", "rationale": "PO1. pass indicates data used to characterize performance of sorting algorithms"}]}}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 0 fragment(s) in the reflection.md or the output while expecting at least 5"}, {"description": "Show approximate doubling ratio for each algorithm using mathematical markdown syntax", "check": "MatchFileFragment", "options": {"fragment": "\u0007pprox", "count": 5, "exact": false}, "objectives": {"LO1": {"degree": [{"SE": "I", "rationale": "PO1. pass indicates accuracy in characterizing algorithms through mathematical calculation"}, {"CS": "I", "rationale": "PO1. pass indicates accuracy in characterizing algorithms through mathematical calculation"}]}, "LO3": {"degree": [{"DS": "I", "rationale": "PO1. pass indicates data used to characterize performance of sorting algorithms"}]}}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 0 fragment(s) in the reflection.md or the output while expecting at least 5"}, {"description": "Pass the source code linting and formatting checks run by ruff", "command": "cd listsorting && poetry run task ruff", "objectives": {"LO5": {"degree": [{"SE": "D", "rationale": "PO1. ruff linter pass indicates code conforms to industry standards"}]}}, "status": false, "diagnostic": "listsorting/experiment.py:3:1: I001 [*] Import block is un-sorted or un-formatted\n     listsorting/main.py:9:1: I001 [*] Import block is un-sorted or un-formatted\n     listsorting/sorting.py:3:1: I001 [*] Import block is un-sorted or un-formatted\n     listsorting/sorting.py:5:20: F401 [*] `random.randint` imported but unused\n     Found 4 errors.\n     [*] 4 fixable with the `--fix` option."}, {"description": "Pass the type checks run by mypy", "command": "cd listsorting && poetry run task mypy", "objectives": {"LO5": {"degree": [{"SE": "D", "rationale": "PO1. mypy checks pass indicates code conforms to industry standards"}]}}, "status": false, "diagnostic": "listsorting/sorting.py:22: error: Missing return statement  [empty-body]\n     listsorting/sorting.py:26: error: Missing return statement  [empty-body]\n     listsorting/sorting.py:30: error: Missing return statement  [empty-body]\n     listsorting/sorting.py:34: error: Missing return statement  [empty-body]\n     listsorting/sorting.py:38: error: Missing return statement  [empty-body]\n     listsorting/sorting.py:46: error: Missing return statement  [empty-body]\n     Found 6 errors in 1 file (checked 4 source files)"}, {"description": "Pass the markdown linting checks run by pymarkdown", "command": "cd listsorting && poetry run task markdownlint", "objectives": {"LO5": {"degree": [{"SE": "D", "rationale": "PO1. pymarkdown pass indicates documentation conforms to industry standards"}]}}, "status": true}, {"description": "Pass all of the Pytest test cases", "command": "cd listsorting && poetry run task test", "objectives": {"LO4": {"degree": [{"IM": "I", "rationale": "PO1. pytest pass indicates use of tools for testing and debugging"}]}}, "status": false, "diagnostic": "================================================= test session starts ==================================================\n     platform linux -- Python 3.11.9, pytest-7.4.4, pluggy-1.4.0\n     rootdir: /home/runner/work/sorting-algorithms-starter/sorting-algorithms-starter/listsorting\n     collected 3 items\n     \n     tests/test_sorting.py F\n     \n     ======================================================= FAILURES =======================================================\n     ________________________ test_sorting_algorithms_multiple_inputs[list_inputs0-expected_answer0] ________________________\n     \n     list_inputs = [5, 3, 9, 2, 1], expected_answer = [1, 2, 3, 5, 9]\n     \n         @pytest.mark.parametrize(\n             \"list_inputs, expected_answer\",\n             [([5, 3, 9, 2, 1], [1, 2, 3, 5, 9]), ([7, 2, 10, 3, 1], [1, 2, 3, 7, 10])],\n         )\n         def test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n             \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n             sorted_list = sorting.bubble_sort(list_inputs)\n     >       assert sorted_list == expected_answer\n     E       assert None == [1, 2, 3, 5, 9]\n     \n     tests/test_sorting.py:19: AssertionError\n     =============================================== short test summary info ================================================\n     FAILED tests/test_sorting.py::test_sorting_algorithms_multiple_inputs[list_inputs0-expected_answer0] - assert None == [1, 2, 3, 5, 9]\n     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n     ================================================== 1 failed in 0.02s ==================================================="}, {"description": "Have at least a specific minimum of commits in repository", "check": "CountCommits", "options": {"count": 10}, "objectives": {"LO4": {"degree": [{"IM": "I", "rationale": "PO1. commits indicates use of version control systems"}]}}, "status": false, "diagnostic": "Found 5 commit(s) in the Git repository"}]}