{"amount_correct": 20, "percentage_score": 62, "report_time": "2024-04-11 18:13:07", "checks": [{"description": "Ensure that the main.py file exists in the listsorting/listsorting/ directory", "check": "ConfirmFileExists", "status": true, "path": "listsorting/listsorting/experiment.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for main.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "listsorting/listsorting/experiment.py", "diagnostic": "Found 1 fragment(s) in the experiment.py or the output while expecting exactly 0"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in experiment.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 5, "exact": false}, "status": true, "path": "listsorting/listsorting/experiment.py"}, {"description": "Create a sufficient number of single-line comments in experiment.py", "check": "CountSingleLineComments", "options": {"language": "Python", "count": 10, "exact": false}, "status": true, "path": "listsorting/listsorting/experiment.py"}, {"description": "Ensure that the main.py file exists in the listsorting/listsorting/ directory", "check": "ConfirmFileExists", "status": true, "path": "listsorting/listsorting/main.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for main.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "listsorting/listsorting/main.py", "diagnostic": "Found 10 fragment(s) in the main.py or the output while expecting exactly 0"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in main.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 3, "exact": false}, "status": true, "path": "listsorting/listsorting/main.py"}, {"description": "Create a sufficient number of single-line comments in main.py", "check": "CountSingleLineComments", "options": {"language": "Python", "count": 5, "exact": false}, "status": true, "path": "listsorting/listsorting/main.py"}, {"description": "Ensure that the test_sorting.py file exists in the listsorting/tests/ directory", "check": "ConfirmFileExists", "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for test_sorting.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "listsorting/tests/test_sorting.py", "diagnostic": "Found 2 fragment(s) in the test_sorting.py or the output while expecting exactly 0"}, {"description": "Ensure that there are the right number of test cases defined in the test_sorting.py file", "check": "MatchFileFragment", "options": {"fragment": "test_", "count": 2, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in test_sorting.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 2, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Create a sufficient number of single-line comments in test_sorting.py", "check": "CountSingleLineComments", "options": {"language": "Python", "count": 2, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Ensure that the sorting.py file exists in the listsorting/listsorting/ directory", "check": "ConfirmFileExists", "status": true, "path": "listsorting/listsorting/sorting.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for sorting.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "listsorting/listsorting/sorting.py", "diagnostic": "Found 3 fragment(s) in the sorting.py or the output while expecting exactly 0"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in sorting.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 2, "exact": false}, "status": true, "path": "listsorting/listsorting/sorting.py"}, {"description": "Create a sufficient number of single-line comments in sorting.py", "check": "CountSingleLineComments", "options": {"language": "Python", "count": 2, "exact": false}, "status": true, "path": "listsorting/listsorting/sorting.py"}, {"description": "Ensure that the test_sorting.py file exists in the listsorting/tests/ directory", "check": "ConfirmFileExists", "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for test_sorting.py", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "listsorting/tests/test_sorting.py", "diagnostic": "Found 2 fragment(s) in the test_sorting.py or the output while expecting exactly 0"}, {"description": "Ensure that there are the right number of test cases defined in the test_sorting.py file", "check": "MatchFileFragment", "options": {"fragment": "test_", "count": 2, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Create a sufficient number of docstring (i.e., multiple-line) comments in test_sorting.py", "check": "CountMultipleLineComments", "options": {"language": "Python", "count": 3, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Create a sufficient number of single-line comments in test_sorting.py", "check": "CountSingleLineComments", "options": {"language": "Python", "count": 2, "exact": false}, "status": true, "path": "listsorting/tests/test_sorting.py"}, {"description": "Ensure that the reflection.md file exists in the writing/ directory", "check": "ConfirmFileExists", "status": true, "path": "writing/reflection.md"}, {"description": "Complete all TODOs, remove the TODO markers, and rewrite comments for the reflection", "check": "MatchFileFragment", "options": {"fragment": "TODO", "count": 0, "exact": true}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 26 fragment(s) in the reflection.md or the output while expecting exactly 0"}, {"description": "Delete the 'Add Your Name Here' prompt in the reflection file", "check": "MatchFileFragment", "options": {"fragment": "Add Your Name Here", "count": 0, "exact": true}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 1 fragment(s) in the reflection.md or the output while expecting exactly 0"}, {"description": "Confirm that the markdown file has the correct number of headers", "check": "CountMarkdownTags", "options": {"tag": "heading", "count": 18, "exact": false}, "status": true, "path": "writing/reflection.md"}, {"description": "Confirm that the markdown file has the correct number of fenced code blocks", "check": "CountMarkdownTags", "options": {"tag": "code_block", "count": 5, "exact": false}, "status": false, "path": "writing/reflection.md", "diagnostic": "Found 0 tag(s) in the reflection.md file"}, {"description": "Pass the source code linting and formatting checks run by ruff", "command": "cd listsorting && poetry run task ruff", "status": false, "diagnostic": "listsorting/experiment.py:3:1: I001 [*] Import block is un-sorted or un-formatted\n     listsorting/main.py:9:1: I001 [*] Import block is un-sorted or un-formatted\n     listsorting/sorting.py:3:1: I001 [*] Import block is un-sorted or un-formatted\n     listsorting/sorting.py:5:20: F401 [*] `random.randint` imported but unused\n     Found 4 errors.\n     [*] 4 fixable with the `--fix` option."}, {"description": "Pass the type checks run by mypy", "command": "cd listsorting && poetry run task mypy", "status": false, "diagnostic": "listsorting/sorting.py:22: error: Missing return statement  [empty-body]\n     listsorting/sorting.py:26: error: Missing return statement  [empty-body]\n     listsorting/sorting.py:30: error: Missing return statement  [empty-body]\n     listsorting/sorting.py:34: error: Missing return statement  [empty-body]\n     listsorting/sorting.py:38: error: Missing return statement  [empty-body]\n     listsorting/sorting.py:46: error: Missing return statement  [empty-body]\n     Found 6 errors in 1 file (checked 4 source files)"}, {"description": "Pass the markdown linting checks run by pymarkdown", "command": "cd listsorting && poetry run task markdownlint", "status": true}, {"description": "Pass all of the Pytest test cases", "command": "cd listsorting && poetry run task test", "status": false, "diagnostic": "================================================= test session starts ==================================================\n     platform linux -- Python 3.11.9, pytest-7.4.4, pluggy-1.4.0\n     rootdir: /home/runner/work/sorting-algorithms-starter/sorting-algorithms-starter/listsorting\n     collected 3 items\n     \n     tests/test_sorting.py F\n     \n     ======================================================= FAILURES =======================================================\n     ________________________ test_sorting_algorithms_multiple_inputs[list_inputs0-expected_answer0] ________________________\n     \n     list_inputs = [5, 3, 9, 2, 1], expected_answer = [1, 2, 3, 5, 9]\n     \n         @pytest.mark.parametrize(\n             \"list_inputs, expected_answer\",\n             [([5, 3, 9, 2, 1], [1, 2, 3, 5, 9]), ([7, 2, 10, 3, 1], [1, 2, 3, 7, 10])],\n         )\n         def test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n             \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n             sorted_list = sorting.bubble_sort(list_inputs)\n     >       assert sorted_list == expected_answer\n     E       assert None == [1, 2, 3, 5, 9]\n     \n     tests/test_sorting.py:19: AssertionError\n     =============================================== short test summary info ================================================\n     FAILED tests/test_sorting.py::test_sorting_algorithms_multiple_inputs[list_inputs0-expected_answer0] - assert None == [1, 2, 3, 5, 9]\n     !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 1 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n     ================================================== 1 failed in 0.02s ==================================================="}, {"description": "Have at least a specific minimum of commits in repository", "check": "CountCommits", "options": {"count": 10}, "status": false, "diagnostic": "Found 3 commit(s) in the Git repository"}]}